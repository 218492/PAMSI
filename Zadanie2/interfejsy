class interfejsstosu{
public:
virtual void push(element)=0;
virtual element pop()=0;   /*throws out of range exception if empty*/
virtual int size()=0;
virtual bool isempty()=0; /*true when size=0*/
};

class interfejslisty{
public:
virtual int add(element, int)=0;
virtual void remove(int)=0;
virtual element get(int)=0; /*throws out of range exception if empty or >size*/
virtual int size()=0;
};

class interfejskolejki{
public:
virtual int size()=0;
virtual bool isempty()=0;
virtual void enqueue(element)=0;
virtual void dequeue()=0;   //throws out of range exception if empty*/
};

/*stos zrobiony na bazie tablicy dynamicznej. Gdy jest pelna, rozszerza sie o 10, ale rozmiar stosu jest liczony oddzielnie od rozmiaru tablicy wraz z przybywaniem i ubywaniem elementow*/
class stos{
int tabsize;
int stacksize;
int *w1;
int *w2;
int x=10;
void tabd::zniszcztab2(){     /*metoda pozwalajaca zniszczyc tablice, na ktora wskazuje wskaznik2*/
    delete[] w2;
    w2=NULL;
    }
void tabd::powieksz1(){  /*metoda realizujaca powiekszanie tablicy o stala wartosc*/
    w2=w1;              /*wska≈∫nik w2 wskazuje teraz na stara tablice, a w1 bedzie nowa tablica*/
    int rozmiar2=rozmiar;
    rozmiar=rozmiar+x;  /*powiekszamy rozmiar*/
    w1=new int[rozmiar];/*tworzymy tablice o nowym rozmiarze*/
    for(int i=0; i<(rozmiar2); i++){
    w1[i]=w2[i];
    }
    zniszcztab2();
    }
public:
stos(){
tabsize=10;
w1=new int[tabsize]
stacksize=0;
}
void push(element){
w1[stacksize]=element;
stacksize=stacksize+1;
}
element pop(){
return(w1[stacksize]);
stacksize=stacksize-1;
}
}
